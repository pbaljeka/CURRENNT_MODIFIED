--------------------
Block 0824x01:
      // This block is used for AR model based on matrix transformation
		//  x - Ax_t-1 - b
		
      // for full-matrix transformation (not used anymore)
		// step1.1 get the data corresponding to this unit
		internal::CopyTargetData fn;
		fn.startDOut   = this->m_startDimOut;
		fn.featureDim  = this->m_featureDim;
		fn.layerSizeOut= this->m_layerSizeTar;
		
		fn.patTypes  = helpers::getRawPointer(this->m_precedingLayer.patTypes());
		fn.output    = helpers::getRawPointer(targets);
		fn.target    = helpers::getRawPointer(this->m_dataBuff) + 
		    this->m_maxTime * this->m_featureDim * this->m_numMixture + 
		    this->m_featureDim * this->m_paral;   // shift by 1 time
		
		int n  = (this->m_precedingLayer.curMaxSeqLength() - 1);
		n =  n * this->m_precedingLayer.parallelSequences();
		n =  n * this->m_featureDim;

		thrust::for_each(thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0)+n,
				 fn);		
		/*
		#ifdef DEBUG_LOCAL
		Cpu::real_vector tmp1 = targets;
		Cpu::real_vector tmp2 = this->m_dataBuff;
		printf("\n"); real_t sum1 = 0.0; real_t sum2 = 0.0;
		for (int i = 0; i < ( n / this->m_featureDim); i++){
		    for (int j = 0; j < this->m_featureDim; j++){			
			int pos_data1 = (fn.layerSizeOut * i)+fn.startDOut+j;
			int pos_data2 = i*this->m_featureDim + j + 
			    this->m_maxTime * this->m_featureDim * this->m_numMixture + 
			    this->m_featureDim * this->m_paral;
			sum1 += tmp1[pos_data1]; sum2 += tmp2[pos_data2];
		    }
		}
		printf("\nCopyTarget %f %f\n", sum1, sum2);
                #endif
		*/

		// step1.2 transform
		helpers::Matrix<TDevice> weightsMatrix(this->m_weights,
						       this->m_featureDim * this->m_numMixture,
						       this->m_featureDim,
						       this->m_weightStart);
		helpers::Matrix<TDevice> targetsMat(&this->m_dataBuff, this->m_featureDim,
						    this->m_totalTime,
						    this->m_maxTime * this->m_featureDim * 
						    this->m_numMixture
						    );
		helpers::Matrix<TDevice> transformed(&this->m_dataBuff,  
						     this->m_featureDim * this->m_numMixture,
						     this->m_totalTime);
		transformed.assignProduct(weightsMatrix, false, targetsMat, false);
		
		/*
		#ifdef DEBUG_LOCAL
		Cpu::real_vector mat1 = (*this->m_weights);
		Cpu::real_vector mat2 = this->m_dataBuff;
		real_t sum3 = 0.0;
		real_t sum4 = 0.0;
		for (int i = 0; i < this->m_featureDim; i++){
		    if (i % 10 == 0)
			printf("\n");
		    printf("%f\t", mat1[i]);
		}
		for (int i = 0; i < this->m_totalTime; i++){
		    for (int j =0; j < (this->m_featureDim * this->m_numMixture); j++){
			real_t tmp=0.0;
			for (int k = 0; k< this->m_featureDim; k++){
			    tmp += mat1[k+j*this->m_featureDim + this->m_weightStart] * 
				mat2[k+i*this->m_featureDim+this->m_maxTime * this->m_featureDim * 
				     this->m_numMixture];
			    if (mat1[k+j*this->m_featureDim + this->m_weightStart] 
				!= mat1[k+j*this->m_featureDim + this->m_weightStart]){
				printf("Detect Nan");
			    }
			}
			//printf("%f\t", tmp-mat2[i*this->m_featureDim * this->m_numMixture+j]);
			sum3 += tmp;
			if (sum3 != sum3){
			    printf("Detect Nan ");
			}
			sum4 += mat2[i*this->m_featureDim * this->m_numMixture+j];
		    }
		}
		printf("Transform %f %f\n", sum3, sum4);
		#endif*/
		
		// step1.3 shift by the bias and change the mean value
		// Update the mean value as mu+wx+b
		internal::ShiftBiasStep1 fn2;
		fn2.featureDim   = this->m_featureDim;
		fn2.mixNum       = this->m_numMixture;
		fn2.totalTime    = this->m_totalTime;
		
		fn2.linearPart   = helpers::getRawPointer(this->m_dataBuff);
		fn2.biasPart     = this->m_weightsPtr  + 
		                   this->m_featureDim * this->m_featureDim * this->m_numMixture;

		fn2.trainableAPos= -1;   // this is not useful for mxiture_dynSqr
		fn2.trainableBPos= -1;   // this is not useful for mxiture_dynSqr

		fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		n =  this->m_totalTime * this->m_numMixture * this->m_featureDim;
		thrust::for_each(thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0)+n,
				 fn2);

--------------------
Block 0824x02:
      // calculate the weightUpdate for this->m_weights
	{{
		// step1, prepare the (x - (u+wx+b)) part
		internal::ShiftBiasStep2 fn2;
		#ifdef DEBUG_LOCAL
		Cpu::real_vector mat1 = (*this->m_weights);
		Cpu::real_vector mat2 = this->m_dataBuff;
		#endif
		
		
		fn2.featureDim   = this->m_featureDim;
		fn2.mixNum       = this->m_numMixture;
		fn2.totalTime    = this->m_totalTime;
		fn2.startDOut    = this->m_startDimOut;
		fn2.layerSizeOut = this->m_layerSizeTar;

		fn2.linearPart   = helpers::getRawPointer(this->m_dataBuff);
		fn2.biasPart     = this->m_weightsPtr + 
		                   this->m_featureDim * this->m_featureDim * this->m_numMixture;
		fn2.target       = helpers::getRawPointer(targets);
		fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		fn2.postPbuff    = helpers::getRawPointer(this->m_tmpPat);
		fn2.tieVar       = this->m_tieVar;
		int n =  this->m_totalTime * this->m_numMixture * this->m_featureDim;
		thrust::for_each(thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0)+n,
				 fn2);

		
		
		#ifdef DEBUG_LOCAL
		Cpu::real_vector mat3 = this->m_paraVec;
		Cpu::real_vector mat5 = this->m_dataBuff;
		Cpu::real_vector mat6 = *this->m_weights;
		Cpu::real_vector mat7 = this->m_tmpPat;
		Cpu::real_vector mat8 = targets;
		printf("\bShiftBias\n");
		for (int idx = 0; idx < this->m_featureDim; idx++){
		    printf("%f\t", mat5[this->m_featureDim * this->m_numMixture + idx]);
		    if (idx % 10 ==9)
			printf("\n");
		}
		if (this->m_totalTime < 100){
		for (int idx = this->m_featureDim * this->m_numMixture; 
		     idx < this->m_featureDim * (this->m_numMixture + 1); 
		     idx++){
		    //break;
		    int temp      = idx  % (fn2.featureDim * fn2.mixNum); 
		    int featIndex = temp % fn2.featureDim; 
		    int timeStep  = idx  / (fn2.featureDim * fn2.mixNum); 
		    int mixIndex  = temp / fn2.featureDim;
		    
		    int pos_mean, pos_var, pos_data;
		    // Add to the mean value
		    pos_mean = (fn2.totalTime * fn2.mixNum + 
				timeStep  * fn2.featureDim * fn2.mixNum + 
				mixIndex  * fn2.featureDim + featIndex); 
		    if (timeStep == 0){
			continue;
		    }else{
			/*
			mat3[pos_mean] = (mat3[pos_mean] + 
					  mat2[idx]   + 
					  mat6[this->m_weightStart + 
					       this->m_featureDim * 
					       this->m_featureDim * this->m_numMixture+featIndex]
					       );*/
		    }
		    
		    pos_var  = (fn2.totalTime * (fn2.mixNum + fn2.mixNum * fn2.featureDim)    + 
				timeStep  *  fn2.mixNum * (fn2.tieVar ? 1 : fn2.featureDim) + 
				mixIndex  * (fn2.tieVar ? 1 : fn2.featureDim)        +
				(fn2.tieVar ? 0 : featIndex)); 
		    
		    // pointer to the posterior P and sum of posterior P
		    
		    const real_t postP   = mat7[timeStep  * fn2.mixNum + mixIndex];
		    const real_t sumPost = mat7[fn2.totalTime * fn2.mixNum + timeStep];
		    real_t posterior = std::exp((postP) - (sumPost));
		    
		    // point to the targets data x
		    pos_data = (fn2.layerSizeOut * timeStep) + fn2.startDOut + featIndex;
	    
		    // save x - u - wx'-b to dataBuff now
		    real_t resu = (-1 * posterior * (mat8[pos_data] - mat3[pos_mean]) 
				   / mat3[pos_var] / mat3[pos_var]);
		    printf("%f %f %f %f\t", mat8[pos_data], mat3[pos_mean], mat3[pos_var], resu);
		    
		    
		    // save \phi(i)\sigma()(x-u-wx'-b) in time order
		    //pos_data = (mixIndex * fn2.totalTime + timeStep)*fn2.featureDim+featIndex; 
		    //mat4[pos_data] = -1* posterior * mat3[pos_var] * (mat5[idx]);
		    
		}}
		printf("\n");
		#endif
	}}

	{{
	    // step2 update the gradients
	    helpers::Matrix<TDevice> diffData(&this->m_dataBuff, 
					      this->m_numMixture * this->m_featureDim,
					      this->m_totalTime);
	    helpers::Matrix<TDevice> tartData(&this->m_dataBuff, this->m_featureDim,
					      this->m_totalTime,
					      this->m_maxTime * this->m_featureDim * 
					      this->m_numMixture
					      );
	    helpers::Matrix<TDevice> gradMat (this->m_weightUpdates, 
					      this->m_numMixture * this->m_featureDim,
					      this->m_featureDim,
					      this->m_weightStart
					      );
	    gradMat.assignProduct(diffData, false, tartData, true);
	    
	    // bias part
	    helpers::Matrix<TDevice> onevec  (&this->m_oneVec, 
					      this->m_numMixture * this->m_totalTime, 1);
	    // point to the weightUpdates of bias part
	    helpers::Matrix<TDevice> gradBia (this->m_weightUpdates, 
					      this->m_numMixture * this->m_featureDim, 1,
					      this->m_weightStart + 
					      this->m_featureDim * this->m_featureDim * 
					      this->m_numMixture
					      );
	    gradBia.assignProduct(diffData, false, onevec, false);
	}}
	
	#ifdef DEBUG_LOCAL
	printf("\nGraidents to weights\n");
	Cpu::real_vector tmp2= this->m_dataBuff;
	Cpu::real_vector tmp = *this->m_weightUpdates;
	Cpu::real_vector tmp3= *this->m_weights;
	for (int i = 0; i < this->m_featureDim; i++){
	    if (i % 5 == 0)
		printf("\n");
	    printf("%f %f %f %f %f\t", 
		   tmp2[i + this->m_featureDim * this->m_numMixture], 
		   tmp[i],
		   tmp[i +
			this->m_weightStart + 
			this->m_featureDim  * this->m_featureDim * this->m_numMixture],
		   tmp3[i+this->m_weightStart],
		   tmp3[i +
			this->m_weightStart + 
			this->m_featureDim  * this->m_featureDim * this->m_numMixture]);
	}
	printf("\n");
	#endif


--------------------
Block 0824x03:
		    /*
		    thrust::fill(this->m_dataBuff.begin(), this->m_dataBuff.end(), (real_t)0.0);
		    this->m_paral     = this->m_precedingLayer.parallelSequences();
		    
		    // step1.1 get the data corresponding to this unit
		    internal::CopyTargetData fn;
		    fn.startDOut   = this->m_startDimOut;
		    fn.featureDim  = this->m_featureDim;
		    fn.layerSizeOut= this->m_layerSizeTar;
		
		    fn.patTypes  = helpers::getRawPointer(this->m_precedingLayer.patTypes());
		    fn.output    = targets;
		    fn.target    = helpers::getRawPointer(this->m_dataBuff) + 
			this->m_maxTime * this->m_featureDim * this->m_numMixture + 
			this->m_featureDim * this->m_paral; // shift by 1 time to the currennt time
		    
		    // pointer to the previous generated data
		    startPos    = (i-1) * datapointerperFrame;
		    endPos      = (i)   * datapointerperFrame;
		    
		    thrust::for_each(thrust::counting_iterator<int>(0) + startPos,
				     thrust::counting_iterator<int>(0) + endPos,   fn);		   
		    
		    #ifdef DEBUG_LOCAL
		    internal::CopySimple2 fn4;
		    real_vector target_temp(datapoint, 0.0);
		    fn4.Output = helpers::getRawPointer(target_temp);
		    fn4.in     = targets;
		    thrust::for_each(thrust::counting_iterator<int>(0),
				     thrust::counting_iterator<int>(0)+ datapoint, fn4);
		    Cpu::real_vector target_temp2 = target_temp;
		    #endif
		    
		    // pointer to the current data frame
		    startPos    = (i)  * datapointerperFrame;
		    endPos      = (i+1)* datapointerperFrame;

		    // step1.2 transform
		    helpers::Matrix<TDevice> weightsMatrix(this->m_weights,
							   this->m_featureDim * this->m_numMixture,
							   this->m_featureDim,
							   this->m_weightStart);
		    helpers::Matrix<TDevice> targetsMat(&this->m_dataBuff, this->m_featureDim,
							this->m_paral,
							this->m_maxTime * this->m_featureDim * 
							this->m_numMixture + startPos
							);
		    helpers::Matrix<TDevice> transformed(&this->m_dataBuff,  
							 this->m_featureDim * this->m_numMixture,
							 this->m_paral,
							 startPos *  this->m_numMixture
							 );
		    transformed.assignProduct(weightsMatrix, false, targetsMat, false);
		    
		    #ifdef DEBUG_LOCAL		    		    
		    Cpu::real_vector mat1 = (*this->m_weights);
		    Cpu::real_vector mat2 = this->m_dataBuff;
		    Cpu::real_vector mat3 = this->m_paraVec;
		    real_t sum3 = 0.0;
		    real_t sum4 = 0.0;
		    for (int j =0; j < (this->m_featureDim * this->m_numMixture); j++){
			real_t tmp=0.0;
			for (int k = 0; k< this->m_featureDim; k++){
			    tmp += mat1[j + 
					k * this->m_featureDim * this->m_numMixture + 
					this->m_weightStart] * 
				mat2[k+i*this->m_featureDim+this->m_maxTime * this->m_featureDim * 
				     this->m_numMixture];
			}
			//printf("%f\t", tmp-mat2[i*this->m_featureDim * this->m_numMixture+j]);
			sum3 += tmp;
			sum4 += mat2[i*this->m_featureDim * this->m_numMixture+j];
		    }
		    printf("Transform %f %f\n", sum3, sum4);
		    #endif

		    // step1.3 shift by the bias and change the mean value
		    // Update the mean value as mu+wx+b
		    internal::ShiftBiasStep1 fn2;
		    fn2.featureDim   = this->m_featureDim;
		    fn2.mixNum       = this->m_numMixture;
		    fn2.totalTime    = time * this->m_precedingLayer.parallelSequences();
		    
		    fn2.linearPart   = helpers::getRawPointer(this->m_dataBuff);
		    fn2.biasPart     = this->m_weightsPtr  + 
			this->m_featureDim * this->m_featureDim * this->m_numMixture;
		
		    fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		    
		    // pointer tot the w^k O + b
		    startPos  *=  this->m_numMixture;
		    endPos    *=  this->m_numMixture;

		    thrust::for_each(thrust::counting_iterator<int>(0)+startPos,
				     thrust::counting_iterator<int>(0)+endPos,
				     fn2);
		    
		    #ifdef DEBUG_LOCAL
		    Cpu::real_vector mat4 = this->m_paraVec;
		    real_t sum = 0.0;
		    for (int idx = startPos; idx < endPos; idx++){
			int temp = idx % (fn2.featureDim * fn2.mixNum);
			int featIndex = temp % (fn2.featureDim);
			int timeStep  = idx / (fn2.featureDim * fn2.mixNum);
			int mixIndex  = temp/ fn2.featureDim;

			int index = fn2.totalTime * fn2.mixNum + 
			    timeStep * fn2.featureDim * fn2.mixNum + 
			    mixIndex * fn2.featureDim + featIndex;
			int index2 = mixIndex * fn2.featureDim + featIndex;
			real_t mean1 = mat4[index];
			real_t mean2 = mat3[index];
			real_t tmp = (mat3[index] + mat2[idx] + 
					      mat1[index2 + 
						   this->m_featureDim * 
						   this->m_featureDim * 
						   this->m_numMixture]);
			real_t tmp2 = mat4[index] - tmp;
			printf("%f %f\t", tmp2, tmp);
			sum += tmp2*tmp2;
		    }
		    printf("\n");
		    #endif
		    */

--------------------
Block 0824x04:



--------------------
Block 1025x01:
	if ((this->m_tanhReg >0) && this->m_backOrder < 0){
	    // if ((this->m_tanhReg >0) && this->m_backOrder < 3){
	    // Update the AR along the time axis
	    if (this->m_dynDirection == MDNUNIT_TYPE_1_DIRECT || 
		this->m_dynDirection == MDNUNIT_TYPE_1_DIRECB ){
		internal::TanhAutoRegWeightStep1 fn1;
		internal::TanhAutoRegWeightStep2 fn2;
		fn1.backOrder  = this->m_backOrder;
		fn1.featureDim = this->m_featureDim;
		/* ******** FATAL ERROR *************
		 * this->m_weights is the shared weight vector
		 * **********************************/
		//fn1.weight     = helpers::getRawPointer(*this->m_weights);
		 fn1.weight     = this->m_weightsPtr;
	    
		fn1.weightOut  = helpers::getRawPointer(this->m_wTransBuff);
		thrust::for_each(
				 thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0) + this->m_featureDim * 2,
				 fn1);
		
		fn2.featureDim = this->m_featureDim;
		fn2.weight     = helpers::getRawPointer(this->m_wTransBuff);
		fn2.weightOut  = helpers::getRawPointer(this->m_wTransBuff)+this->m_featureDim * 2;
		thrust::for_each(
				 thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0) + this->m_featureDim * 2,
				 fn2);
	    }   
	    // Update the AR along the dimension axis
	    if (this->m_dynDirection == MDNUNIT_TYPE_1_DIRECD || 
		this->m_dynDirection == MDNUNIT_TYPE_1_DIRECB ){
		internal::TanhAutoRegWeightStep1 fn1;
		internal::TanhAutoRegWeightStep2 fn2;
		fn1.backOrder  = this->m_backOrder;
		fn1.featureDim = 1;
		fn1.weight     = this->m_weightsPtr + this->m_weightShiftToDim;
		fn1.weightOut  = helpers::getRawPointer(this->m_wTransBuff) + 
		                 this->m_wTransBuffShiftToDim;
		thrust::for_each(
				 thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0) + 2,
				 fn1);
		
		fn2.featureDim = 1;
		fn2.weight     = helpers::getRawPointer(this->m_wTransBuff)+ 
		                 this->m_wTransBuffShiftToDim;
		fn2.weightOut  = helpers::getRawPointer(this->m_wTransBuff)+ 
		                 this->m_wTransBuffShiftToDim + 2;
		thrust::for_each(
				 thrust::counting_iterator<int>(0),
				 thrust::counting_iterator<int>(0) + 2,
				 fn2);
	    }
	}



--------------
Block 1025x02:

        else if (dynDirection == MDNUNIT_TYPE_1_DIRECD){
	    
	    throw std::runtime_error("ARRMDN along dimension axis is no longer supported");
	    // AR along the dimension axis
	    m_linearPartLength = 1;
	    m_biasPartLength   = 1;
	    m_weightShiftToDim = 0;
	    m_wTransBuffShiftToDim = 0;
	    
	}else{
	    
	    throw std::runtime_error("ARRMDN along dimension axis is no longer supported");
	    // AR along both dimension and time axis
	    m_linearPartLength = this->m_featureDim + 1;
	    m_biasPartLength   = this->m_featureDim + 1;
	    // this is complicated, due to historical reason
	    m_weightShiftToDim = this->m_featureDim * (m_backOrder + 1);
	    m_wTransBuffShiftToDim = this->m_featureDim * 4;
	}


-------------
Block 1025x03:
      /* ### 
	   obsolete optionx
	if (m_backOrder > 2 && m_tanhReg){
	    //printf("Tanh Autoregressive is not implemented for step order > 2");
	    //m_tanhReg  = 0;
	    //m_wTransBuff.clear();
	    // dimension * (backorder + 1) * 2 * (backorder + 1)
	    m_wTransBuff.resize(this->m_featureDim*(m_backOrder+1)*(m_backOrder*3+2), 0);
	    
	}else{
	    m_wTransBuff.resize((this->m_featureDim + 1) * 4, 0); // the maximum size it can have
	}*/

	


------------
Block 1025x04:
      	    // Regressio on the dimension axis 
	    {{
		if(this->m_dynDirection == MDNUNIT_TYPE_1_DIRECD || 
		   this->m_dynDirection == MDNUNIT_TYPE_1_DIRECB){
		   		    
		    for (int stepBack    = 1; stepBack <= this->m_backOrder; stepBack++){
			internal::ShiftBiasStep1TiedCaseDimensionAxis fn2;
			
			fn2.startDOut    = this->m_startDimOut;
			fn2.featureDim   = this->m_featureDim;
			fn2.layerSizeOut = this->m_layerSizeTar;
			fn2.mixNum       = this->m_numMixture;
			fn2.totalTime    = this->m_totalTime;
			fn2.tieVar       = this->m_tieVar;
			fn2.targets      = helpers::getRawPointer(targets);
			
			if (this->m_tanhReg && this->m_backOrder < 3){
			    fn2.linearPart = helpers::getRawPointer(this->m_wTransBuff) + 
				             (stepBack - 1 + 2)  +
				             this->m_wTransBuffShiftToDim;
			}else{
			    fn2.linearPart = this->m_weightsPtr + this->m_weightShiftToDim
				             + (stepBack-1);
			}
		    
			fn2.biasPart     = this->m_weightsPtr + this->m_weightShiftToDim + 
			                   this->m_backOrder;
			
			fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
			fn2.stepBack     = stepBack;
			
			fn2.trainableAPos= -1;   // this is useful for mxiture_dynSqr
			fn2.trainableBPos= -1;   // this is useful for mxiture_dynSqr
		
			
			int n =  this->m_totalTime * this->m_numMixture * this->m_featureDim;
			thrust::for_each(thrust::counting_iterator<int>(0),
					 thrust::counting_iterator<int>(0)+n,
					 fn2);
		    }
		    
		}
	    }}





------- 
Block 1025x05:
      // (obsolete implementation)
			if (this->m_tanhReg && this->m_backOrder < 0){
			    //if (this->m_tanhReg && this->m_backOrder < 3){ 
			    fn2.linearPart = helpers::getRawPointer(this->m_wTransBuff) + 
				             (stepBack - 1 + 2) * this->m_featureDim;
			// AR casecade form
			}else 



------
Block 1925:x06:
          // gradient for the AR on dimension axis
	    if (this->m_dynDirection == MDNUNIT_TYPE_1_DIRECD || 
		this->m_dynDirection == MDNUNIT_TYPE_1_DIRECB){
		if (this->m_tanhReg){
		    internal::ShiftBiasStep2TiedCaseAutoRegDimensionAxis fn2;
		    fn2.featureDim   = this->m_featureDim;
		    fn2.mixNum       = this->m_numMixture;
		    fn2.totalTime    = this->m_totalTime;
		    fn2.startDOut    = this->m_startDimOut;
		    fn2.layerSizeOut = this->m_layerSizeTar;
		    fn2.transBuff    = helpers::getRawPointer(this->m_wTransBuff) + 
			               this->m_wTransBuffShiftToDim;
		    fn2.gradBuf      = helpers::getRawPointer(this->m_dataBuff);
		    fn2.target       = helpers::getRawPointer(targets);
		    fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		    fn2.postPbuff    = helpers::getRawPointer(this->m_tmpPat);
		    fn2.tieVar       = this->m_tieVar;
		    fn2.backOrder    = this->m_backOrder;
		
		    int n =  this->m_backOrder  * this->m_totalTime * 
			     this->m_numMixture * this->m_featureDim;
		    thrust::for_each(thrust::counting_iterator<int>(0),
				     thrust::counting_iterator<int>(0)+n,
				     fn2);
		}else{
		    internal::ShiftBiasStep2TiedCaseDimensionAxis fn2;
		
		    fn2.featureDim   = this->m_featureDim;
		    fn2.mixNum       = this->m_numMixture;
		    fn2.totalTime    = this->m_totalTime;
		    fn2.startDOut    = this->m_startDimOut;
		    fn2.layerSizeOut = this->m_layerSizeTar;
		    
		    fn2.gradBuf      = helpers::getRawPointer(this->m_dataBuff);
		    fn2.target       = helpers::getRawPointer(targets);
		    fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		    fn2.postPbuff    = helpers::getRawPointer(this->m_tmpPat);
		    fn2.tieVar       = this->m_tieVar;
		    fn2.backOrder    = this->m_backOrder;
		
		    int n =  this->m_backOrder  * this->m_totalTime * 
			this->m_numMixture * this->m_featureDim;
		    thrust::for_each(thrust::counting_iterator<int>(0),
				     thrust::counting_iterator<int>(0)+n,
				     fn2);
		}
	    	
		// step2 update the gradients for W    
		thrust::fill(this->m_oneVec.begin(), this->m_oneVec.end(), 
			     1.0/this->m_numMixture * this->m_totalTime);
		helpers::Matrix<TDevice> onevec  (&this->m_oneVec, 
						  this->m_numMixture * this->m_totalTime 
						  * this->m_featureDim, 
						  1);
		helpers::Matrix<TDevice> diffW   (&this->m_dataBuff, 
						  this->m_backOrder,
						  this->m_featureDim * 
						  this->m_totalTime  * this->m_numMixture);
		helpers::Matrix<TDevice> gradW   (this->m_weightUpdates, 
						  this->m_backOrder,
						  1,
						  this->m_weightStart + this->m_weightShiftToDim
						  );
		gradW.assignProduct(diffW, false, onevec, false);
		
		/******************* FATAL ERROR ******************
		 *  Remember to shift the gradb
		 **************************************************/
		// point to the weightUpdates of bias part
		helpers::Matrix<TDevice> diffB   (&this->m_dataBuff, 
						  1,
						  this->m_featureDim * 
						  this->m_totalTime * this->m_numMixture,
						  this->m_totalTime * this->m_numMixture *
						  this->m_backOrder * this->m_featureDim);
		helpers::Matrix<TDevice> gradb   (this->m_weightUpdates, 
						  1, 
						  1,
						  this->m_weightStart + 
						  this->m_weightShiftToDim + 
						  this->m_backOrder
						  );
		gradb.assignProduct(diffB, false, onevec, false);
	    }



-----------
Block 1025x07:

      struct ShiftBiasStep2TiedCaseAutoReg
    {
	// Accumulating the statistics for BP on the linear regression part W^T o+b
	// Only implemented for 1st and 2nd order case
	// For 2-order case
	// Gradients = 
	//    for a1: -1 * posterior(m) * (o-mean)/var^2 * [o_t-1 - a2*o_t-2] * [1-a1^2]
	//    for a2: -1 * posterior(m) * (o-mean)/var^2 * [o_t-1 - a1*o_t-2] * [1-a2^2]
	//    o_t-1 and o_t-2 are zero when t-1 < 0 or t-2 < 0
	// For 1-order case
	//    for a1: -1 * posterior(m) * (o-mean)/var^2 * [o_t-1] * [1-a1^2]
	int featureDim;
	int mixNum;
	int totalTime;
	int startDOut;
	int layerSizeOut;
	int backOrder;

	real_t   *gradBuf;
	real_t   *target;       // x
	real_t   *mdnPara;      // 
	real_t   *postPbuff;
	real_t   *transBuff;
	bool      tieVar;

	// from 1 to timesteps * num_mixture
	__host__ __device__ void operator() (const int idx) const
	{
	    
	    int temp      = idx % (featureDim * mixNum); 
	    int featIndex = temp % featureDim; 
	    int mixIndex  = temp / featureDim;
	    int temp2     = idx  / (featureDim * mixNum);
	    int timeStep  = temp2 % totalTime;
	    int backStep  = temp2 / totalTime + 1;


	    
	    // set the pointer
	    int pos_mean,  pos_var, pos_data, pos_data1, pos_data2;
	    int pos_buffW, pos_buffb;
	    
	    pos_mean = (totalTime * mixNum + 
			timeStep  * featureDim * mixNum + 
			mixIndex  * featureDim + featIndex); 
	    pos_var  = (totalTime * (mixNum + mixNum * featureDim)      + 
			timeStep  *  mixNum * (tieVar ? 1 : featureDim) + 
			mixIndex  * (tieVar ? 1 : featureDim)           +
			(tieVar ? 0 : featIndex)); 
	    
	    // pointer to the posterior P and sum of posterior P
	    const real_t *postP   = postPbuff + timeStep  * mixNum + mixIndex;
	    const real_t *sumPost = postPbuff + totalTime * mixNum + timeStep;
	    real_t posterior = helpers::safeExp((*postP) - (*sumPost));
	    
	    // point to the targets data x
	    pos_data  = (layerSizeOut * (timeStep))    + startDOut + featIndex;
	    pos_data1 = (timeStep>0)?((layerSizeOut * (timeStep-1)) + startDOut + featIndex):-1;
	    pos_data2 = (timeStep>1)?((layerSizeOut * (timeStep-2)) + startDOut + featIndex):-1;
	    
	    // Note, dimension -> backstep -> mixture -> time
	    pos_buffW = (timeStep * mixNum + mixIndex) * featureDim * backOrder +
		        (backStep-1) * featureDim + featIndex;
	    
	    //pos_buffW = (timeStep * mixNum + mixIndex) * featureDim + featIndex;
	    //pos_buffb = pos_buffW + totalTime * featureDim * mixNum;
	    
	    
	    real_t grad = (-1 * posterior * (*(target + pos_data) - *(mdnPara + pos_mean)) /
			   (*(mdnPara + pos_var)) / (*(mdnPara + pos_var)));
	    
	    real_t dataBuff = (pos_data1>0)?(*(target+pos_data1)):0;
	    if (backOrder == 2){
		dataBuff   += (((pos_data2>0)?(*(target+pos_data2)):0) * 
			       ((backStep == 1)?
				(*(transBuff + featIndex + featureDim)):
				(*(transBuff + featIndex))) * 
			       -1);
	    }
	    dataBuff *=  ((backStep==1) ?
		      (1-(*(transBuff+featIndex))*(*(transBuff+featIndex))) :
		      (1-(*(transBuff+featIndex+featureDim))*(*(transBuff+featIndex+featureDim))));
	    
	    *(gradBuf + pos_buffW) = grad * dataBuff;
	    if (backStep == 1){
		// do this for one time when backStep == 1
		/* ***** FATAL ERROR ******
		 * pos_buffb can't be shifted from pos_buffW
		 * ************************ */
		//pos_buffb = pos_buffW + backOrder * totalTime * featureDim * mixNum;
		pos_buffb = backOrder * totalTime * featureDim * mixNum;
		pos_buffb+= (timeStep * mixNum + mixIndex) * featureDim + featIndex;
		*(gradBuf + pos_buffb) = grad;
	    }
	}
    };




----
Block 1025x08:
      if (this->m_tanhReg && this->m_backOrder < 0){
		    //   if (this->m_tanhReg && this->m_backOrder < 3){
		    internal::ShiftBiasStep2TiedCaseAutoReg fn2;
		    fn2.featureDim   = this->m_featureDim;
		    fn2.mixNum       = this->m_numMixture;
		    fn2.totalTime    = this->m_totalTime;
		    fn2.startDOut    = this->m_startDimOut;
		    fn2.layerSizeOut = this->m_layerSizeTar;
		    fn2.transBuff    = helpers::getRawPointer(this->m_wTransBuff);
		    fn2.gradBuf      = helpers::getRawPointer(this->m_dataBuff);
		    fn2.target       = helpers::getRawPointer(targets);
		    fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		    fn2.postPbuff    = helpers::getRawPointer(this->m_tmpPat);
		    fn2.tieVar       = this->m_tieVar;
		    fn2.backOrder    = this->m_backOrder;
		
		    int n =  this->m_backOrder  * this->m_totalTime * 
			this->m_numMixture * this->m_featureDim;
		    thrust::for_each(thrust::counting_iterator<int>(0),
				     thrust::counting_iterator<int>(0)+n,
				     fn2);

		// implementation to calculate the gradient
		}else


------
Block 1025x09:
      struct ShiftBiasStep2TiedCaseAutoRegDimensionAxis
    {
	// Accumulating the statistics for BP on the linear regression part W^T o+b
	// Only implemented for 1st and 2nd order case
	// For 2-order case
	// Gradients = 
	//    for a1: -1 * posterior(m) * (o-mean)/var^2 * [o_t-1 - a2*o_t-2] * [1-a1^2]
	//    for a2: -1 * posterior(m) * (o-mean)/var^2 * [o_t-1 - a1*o_t-2] * [1-a2^2]
	//    o_t-1 and o_t-2 are zero when t-1 < 0 or t-2 < 0
	// For 1-order case
	//    for a1: -1 * posterior(m) * (o-mean)/var^2 * [o_t-1] * [1-a1^2]
	int featureDim;
	int mixNum;
	int totalTime;
	int startDOut;
	int layerSizeOut;
	int backOrder;

	real_t   *gradBuf;
	real_t   *target;       // x
	real_t   *mdnPara;      // 
	real_t   *postPbuff;
	real_t   *transBuff;
	bool      tieVar;

	// from 1 to timesteps * num_mixture
	__host__ __device__ void operator() (const int idx) const
	{
	    
	    int temp      = idx % (featureDim * mixNum); 
	    int featIndex = temp % featureDim; 
	    int mixIndex  = temp / featureDim;
	    int temp2     = idx  / (featureDim * mixNum);
	    int timeStep  = temp2 % totalTime;
	    int backStep  = temp2 / totalTime + 1;


	    
	    // set the pointer
	    int pos_mean,  pos_var, pos_data, pos_data1, pos_data2;
	    int pos_buffW, pos_buffb;
	    
	    pos_mean = (totalTime * mixNum + 
			timeStep  * featureDim * mixNum + 
			mixIndex  * featureDim + featIndex); 
	    pos_var  = (totalTime * (mixNum + mixNum * featureDim)      + 
			timeStep  *  mixNum * (tieVar ? 1 : featureDim) + 
			mixIndex  * (tieVar ? 1 : featureDim)           +
			(tieVar ? 0 : featIndex)); 
	    
	    // pointer to the posterior P and sum of posterior P
	    const real_t *postP   = postPbuff + timeStep  * mixNum + mixIndex;
	    const real_t *sumPost = postPbuff + totalTime * mixNum + timeStep;
	    real_t posterior = helpers::safeExp((*postP) - (*sumPost));
	    
	    // point to the targets data x
	    pos_data  = (layerSizeOut * (timeStep))    + startDOut + featIndex;
	    pos_data1 = (featIndex>0)?(layerSizeOut*timeStep + startDOut + featIndex-1):-1;
	    pos_data2 = (featIndex>1)?(layerSizeOut*timeStep + startDOut + featIndex-2):-1;
	    
	    // Note, backstep -> dimension -> mixture -> time
	    pos_buffW = ((timeStep * mixNum + mixIndex) * featureDim + featIndex) * backOrder +
		        (backStep-1);
	    
	    //pos_buffW = (timeStep * mixNum + mixIndex) * featureDim + featIndex;
	    //pos_buffb = pos_buffW + totalTime * featureDim * mixNum;
	    
	    
	    real_t grad = (-1 * posterior * (*(target + pos_data) - *(mdnPara + pos_mean)) /
			   (*(mdnPara + pos_var)) / (*(mdnPara + pos_var)));
	    
	    real_t dataBuff = (pos_data1>0)?(*(target+pos_data1)):0;
	    if (backOrder == 2){
		dataBuff   += (((pos_data2>0)?(*(target+pos_data2)):0) * 
			       ((backStep == 1)?
				(*(transBuff + 1)):
				(*(transBuff + 0))) * 
			       -1);
	    }
	    dataBuff *=  ((backStep==1) ?
		      (1-(*(transBuff+0))*(*(transBuff+0))) :
		      (1-(*(transBuff+1))*(*(transBuff+1))));
	    
	    *(gradBuf + pos_buffW) = grad * dataBuff;
	    if (backStep == 1){
		// do this for one time when backStep == 1
		pos_buffb = backOrder * totalTime * featureDim * mixNum + 
		            (timeStep * mixNum + mixIndex) * featureDim + featIndex;
		*(gradBuf + pos_buffb) = grad;
	    }
	}
    };



-----
Block 1025x10:

    struct ShiftBiasStep2TiedCaseDimensionAxis
    {
	// Accumulating the statistics for BP on the linear regression part W^T o+b
	// -1 * posteriorP(k) * (O_t - (u + W_k ^ T O_t-1 + b_k)) * O_t-1 / var^k_d / var^k_d
	// -1 * posteriorP(k) * (O_t - (u + W_k ^ T O_t-1 + b_k)) / var^k_d / var^k_d
	
	int featureDim;
	int mixNum;
	int totalTime;
	int startDOut;
	int layerSizeOut;
	int backOrder;

	real_t   *gradBuf;
	real_t   *target;       // x
	real_t   *mdnPara;      // 
	real_t   *postPbuff;
	bool      tieVar;

	// from 1 to timesteps * num_mixture
	__host__ __device__ void operator() (const int idx) const
	{
	    
	    int temp      = idx % (featureDim * mixNum); 
	    int featIndex = temp % featureDim; 
	    int mixIndex  = temp / featureDim;
	    int temp2     = idx  / (featureDim * mixNum);
	    int timeStep  = temp2 % totalTime;
	    int backStep  = temp2 / totalTime + 1;


	    // skip the first time step
	    if (featIndex < backStep)
		return;
	    
	    // set the pointer
	    int pos_mean,  pos_var, pos_data, pos_dataShift;
	    int pos_buffW, pos_buffb;
	    pos_mean = (totalTime * mixNum + 
			timeStep  * featureDim * mixNum + 
			mixIndex  * featureDim + featIndex); 
	    pos_var  = (totalTime * (mixNum + mixNum * featureDim)      + 
			timeStep  *  mixNum * (tieVar ? 1 : featureDim) + 
			mixIndex  * (tieVar ? 1 : featureDim)           +
			(tieVar ? 0 : featIndex)); 
	    
	    // pointer to the posterior P and sum of posterior P
	    const real_t *postP   = postPbuff + timeStep  * mixNum + mixIndex;
	    const real_t *sumPost = postPbuff + totalTime * mixNum + timeStep;
	    real_t posterior = helpers::safeExp((*postP) - (*sumPost));
	    
	    // point to the targets data x
	    /***********p******** Fatal Error ****************************
	     * : how could I just use pos_dataShift as pos_data ??? 
	     ************************************************************/
	    pos_data = (layerSizeOut * (timeStep)) + startDOut + featIndex;
	    pos_dataShift = (layerSizeOut * timeStep) + startDOut + featIndex - backStep;
	    
	    // Note, dimension -> backstep -> mixture -> time
	    pos_buffW = ((timeStep * mixNum + mixIndex) * featureDim + featIndex) * backOrder +
		        (backStep-1);
	    
	    //pos_buffW = (timeStep * mixNum + mixIndex) * featureDim + featIndex;
	    //pos_buffb = pos_buffW + totalTime * featureDim * mixNum;
	    
	    real_t grad = (-1 * posterior * (*(target + pos_data) - *(mdnPara + pos_mean)) /
			   (*(mdnPara + pos_var)) / (*(mdnPara + pos_var)));
	    
	    *(gradBuf + pos_buffW) = grad * (*(target + pos_dataShift));
	    
	    if (backStep == 1){
		// do this for one time when backStep == 1
		pos_buffb = backOrder * totalTime * featureDim * mixNum;
		pos_buffb+= (timeStep * mixNum + mixIndex) * featureDim + featIndex;
		*(gradBuf + pos_buffb) = grad;
	    }
	}
    };



-----------
Block 1025x11

	    // AR along the dimension axis
	    if (this->m_dynDirection == MDNUNIT_TYPE_1_DIRECD || 
		this->m_dynDirection == MDNUNIT_TYPE_1_DIRECB ){
		// ??? this is only for the sampling with a small ratio for variance
		// 
		for (int stepBack = 1; stepBack <= this->m_backOrder; stepBack++){
		    internal::ShiftBiasStep1TiedCaseDimensionAxis fn2;
		    fn2.startDOut    = this->m_startDimOut;
		    fn2.featureDim   = this->m_featureDim;
		    fn2.layerSizeOut = this->m_layerSizeTar;
		    fn2.mixNum       = this->m_numMixture;
		    fn2.totalTime    = this->m_totalTime;
		    fn2.targets      = helpers::getRawPointer(targets);
		    
		    if (this->m_tanhReg && this->m_backOrder < 3){
			fn2.linearPart = helpers::getRawPointer(this->m_wTransBuff) + 
			                (stepBack - 1 + 2)  + this->m_wTransBuffShiftToDim;
		    }else{
			fn2.linearPart = this->m_weightsPtr + this->m_weightShiftToDim
			    + (stepBack-1);
		    }
		    
		    fn2.biasPart     = this->m_weightsPtr + this->m_weightShiftToDim + 
			               this->m_backOrder;
		    
		    fn2.mdnPara      = helpers::getRawPointer(this->m_paraVec);
		    fn2.stepBack     = stepBack;
			
		    fn2.trainableAPos= -1;   // this is useful for mxiture_dynSqr
		    fn2.trainableBPos= -1;   // this is useful for mxiture_dynSqr
		
		    // No choice but iteration. This is an IIR filter
		    for (int featDimIdx = 0; featDimIdx < this->m_featureDim; featDimIdx++){
			startPos = i * this->m_numMixture * this->m_featureDim + featDimIdx;
			endPos   = i * this->m_numMixture * this->m_featureDim + featDimIdx + 1;
			thrust::for_each(thrust::counting_iterator<int>(0)+startPos,
					 thrust::counting_iterator<int>(0)+endPos,
					 fn2);
		    }
		}
	    }




-------------
Block
